================================================================================
Detailed instructions on how to install NuGat 0.5.4

Sebastian Sardina - ssardina@gmail.com 
Nitin Yadav - nitin.yadav@rmit.edu.au
Lorenzo Dibenedetto - lorenzodibenedetto90@gmail.com

These are the instructions to make NuGAT work under Linux.

October 2015 - Version 0.6.0 based on 0.5.4 to work with NuSMV 2.6.0
June 2015 - Version 0.5.4 based on 0.5.0 to work with NuSMV 2.5.4
March 2015
October 2012
===============================================================================

===============
INSTALLATION
===============

1) Make sure you have flex, bison, pkg-config, and all libexpat libs installed:

  sudo apt-get install libc6-dev g++ pkg-config 
  sudo apt-get install flex bison 
  
  sudo apt-get install libreadline5 libreadline6
  sudo apt-get install libexpat1 libxml-parser-ruby libxml-parser-ruby1.9.1
  sudo apt-get install libxml-parser-ruby1.8 libexpat1-dev

  sudo apt-get install libncurses5-dev libncurses5-dev:i386

or in one shot run this:

sudo apt-get install flex bison pkg-config libreadline5 libreadline6 libexpat1
		libxml-parser-ruby libxml-parser-ruby1.9.1 libxml-parser-ruby1.8 libexpat1-dev
		libncurses5-dev libncurses5-dev:i386


All these are required or you will get compile errors at some point! If for some
reason, you need to install some dependencies, you may need to do make clean and
./configure again.


2) Get NuSMV 2.5.4 and NuGAT 0.5.4 tar files.


3) First we compile NuSMV version 2.5.4 

(NOTE: newer versions do not work. It would be good to find out why and fix it
so as to be able to use the latest NuSMV).

The NuSMV package already contains the cudd library for BDDs.

  3.1) Compile ./cudd-2.4.1.1 using make -f <platform>

      e.g., make -f Makefile_64bit	 

  3.2) Maybe patch NuSMV as directed in NuGAT README file (section 6) to avoid
		the following run-time error (problem with BDD lib):

	===============================
	There is an unresolved issued in the BDD encode of NuSMV 2.5. If you
	see assertion violations of the following kind

	NuGaT: bdd/BddEnc.c:4025: bdd_enc_shuffle_variables_order: Assertion `res ==
		1' failed.  Aborted
	===============================

	Apply the patch provided in NuGaT-0.5.0/contrib to
	$(nusmv_dir)/nusmv/src/enc/bdd/BddEnc.c as follows:

        % cd $(NUSMV_DIR)/code/nusmv/core/enc/bdd/
        % patch BddEnc.c < $(nugat_dir)/contrib/BddEnc.c.patch
        % cd ../../..

	This was needed for NuGAT 0.5.4, not sure if needed still on 0.5.4 when
		using NuSMV 2.5.4

  3.2) Then compile and install NuSMV:

			 ./configure --prefix=/opt/NuSMV-2.5.0/ 
			 make
			 sudo make install   

	  This should find the compiled cudd lib automatically. See one can also
	  compile NuSMV with other optional modules (e.g., MiniSAT, Lily, etc).
	  
	  It requires g++ as the C++ compiler (otherwise get error):

		      C++ preprocessor "/lib/cpp" fails sanity check

4) When you install nusmv it creates an extra library librbcdag  in
opt/lib/nusmv-2.5.4. Please copy files that have rbc in their name from opt/lib
folder to nusmv source folder

4) Next, compile NuGAT using the **source** dir of NuSMV 2.5.0 (not its
installation):

      ./configure --prefix=/opt/NuGAT-0.5.4/ 
			--with-nusmv-dir=/home/ssardina/src/NuSMV-2.5.4/nusmv/ CC=/usr/bin/gcc-4.7
      make
      sudo make install 

  See we use the source tree used to compile NuSMV and not the thing that was
  deployed in the system when make all was done for nusmv.

  (For some reason, NuGat does not compile against newer versions of NuSMV.)


5) Make sure NuSMV and NuGAT are in your paths, e.g., symblink into
/usr/local/bin


6) Test NuGAT on the examples provided:

  $ NuGAT examples/simple.smv


NOTES:

1. From NuSMV-2.5.1 onwards Boolean and Integer are treated differently. So, one
cannot write last = 0 if last is a boolean, but should instead write last =
FALSE.






===============
USAGE
===============

A file that has useful information on what NuGAT can do is:

./NuGaT-0.5.0/src/addons/game/gameCmd.c

One can run NuGAT directly from the command line or via a script file. In both
cases, the most improtant option seems to be "--dynamic", which speeds up NuGAT
by a lot.

1) Command line run:

	$ NuGaT -dynamic <smv file>

2) Script run:

	$ NuGaT -source <.script file>

The script should do some steps before solving the game and can do other extra
things that cannot be done with the command line (like simulating or printing
the strategy). My script contains this:

----------------
set on_failure_script_quits 1
read_model -i flip-coin-NUGAT-v01.smv
flatten_hierarchy
set dynamic_reorder 1
encode_variables
set conj_part_threshold 10000
set partition_method Threshold
build_model
check_gen_reactivity -e
check_reach_target  -e
quit

compute_reachable
print_reachable_states
check_fsm
check_ctlspec
pick_state
simulate -v -r
quit
----------------
 

The -e option in the check statements states to print the controller that solves
the problem (if any).


===============
EXAMPLES
===============

I provide three file examples on how to use NuGat for planning.

- flip-coin-NUGAT-v01.smv: 
		flip is deterministic; strong planning has solution
- flip-coin-NUGAT-v02.smv: 
		flip is non-deterministic; no strong plan; cannot express fairness
- flip-coin-NUGAT-v03.smv: 
		same as 02 but with modules for Player 1

File flip-coin-NUGAT-v01.script is a script file for runnig v01 smv file

	$ NuGaT -source flip-coin-NUGAT-v01.script 


You will see that because the script has -e in the checking steps:

check_gen_reactivity -e
check_reach_target  -e


the strategy found, if any, will be printed.


================================================================================
EOF
================================================================================
