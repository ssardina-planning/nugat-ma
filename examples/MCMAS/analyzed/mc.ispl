-- The protocol for the muddy children
-- This file is automatically generated for 5 children

Agent Environment
  Obsvars:
    sayexist: boolean;
  end Obsvars

  Vars:
    initial: boolean;
    total: 0..5;
  end Vars

  RedStates:
  end RedStates

  Actions = { exists, ask };
  Protocol:
    initial=true and total=0: {ask};
    initial=true and total>0: {exists};
    initial=false: {ask};
  end Protocol

  Evolution:
    initial=false and sayexist=true if initial=true and Action=exists;
    initial=false if initial=true and Action=ask;
  end Evolution
end Agent

Agent Child1
  Vars:
    see: 0..4;
    mem: -1..4;
    othersayknow: boolean;
  end Vars
  RedStates:
  end RedStates
  Actions = { donotknow, know };
  Protocol:
    mem<see: {donotknow};
    mem>=see: {know};
  end Protocol
  Evolution:
    mem = mem + 1 if Environment.Action=exists;
    mem = mem + 1 if Environment.Action=ask and mem<see and (othersayknow=true or (Child2.Action=donotknow and Child3.Action=donotknow and Child4.Action=donotknow and Child5.Action=donotknow));
    mem = mem + 1  and othersayknow=true if Environment.Action=ask and mem<see and othersayknow=false and (Child2.Action=know or Child3.Action=know or Child4.Action=know or Child5.Action=know);
  end Evolution
end Agent

Agent Child2
  Vars:
    see: 0..4;
    mem: -1..4;
    othersayknow: boolean;
  end Vars
  RedStates:
  end RedStates
  Actions = { donotknow, know };
  Protocol:
    mem<see: {donotknow};
    mem>=see: {know};
  end Protocol
  Evolution:
    mem = mem + 1 if Environment.Action=exists;
    mem = mem + 1 if Environment.Action=ask and mem<see and (othersayknow=true or (Child1.Action=donotknow and Child3.Action=donotknow and Child4.Action=donotknow and Child5.Action=donotknow));
    mem = mem + 1  and othersayknow=true if Environment.Action=ask and mem<see and othersayknow=false and (Child1.Action=know or Child3.Action=know or Child4.Action=know or Child5.Action=know);
  end Evolution
end Agent

Agent Child3
  Vars:
    see: 0..4;
    mem: -1..4;
    othersayknow: boolean;
  end Vars
  RedStates:
  end RedStates
  Actions = { donotknow, know };
  Protocol:
    mem<see: {donotknow};
    mem>=see: {know};
  end Protocol
  Evolution:
    mem = mem + 1 if Environment.Action=exists;
    mem = mem + 1 if Environment.Action=ask and mem<see and (othersayknow=true or (Child1.Action=donotknow and Child2.Action=donotknow and Child4.Action=donotknow and Child5.Action=donotknow));
    mem = mem + 1  and othersayknow=true if Environment.Action=ask and mem<see and othersayknow=false and (Child1.Action=know or Child2.Action=know or Child4.Action=know or Child5.Action=know);
  end Evolution
end Agent

Agent Child4
  Vars:
    see: 0..4;
    mem: -1..4;
    othersayknow: boolean;
  end Vars
  RedStates:
  end RedStates
  Actions = { donotknow, know };
  Protocol:
    mem<see: {donotknow};
    mem>=see: {know};
  end Protocol
  Evolution:
    mem = mem + 1 if Environment.Action=exists;
    mem = mem + 1 if Environment.Action=ask and mem<see and (othersayknow=true or (Child1.Action=donotknow and Child2.Action=donotknow and Child3.Action=donotknow and Child5.Action=donotknow));
    mem = mem + 1  and othersayknow=true if Environment.Action=ask and mem<see and othersayknow=false and (Child1.Action=know or Child2.Action=know or Child3.Action=know or Child5.Action=know);
  end Evolution
end Agent

Agent Child5
  Vars:
    see: 0..4;
    mem: -1..4;
    othersayknow: boolean;
  end Vars
  RedStates:
  end RedStates
  Actions = { donotknow, know };
  Protocol:
    mem<see: {donotknow};
    mem>=see: {know};
  end Protocol
  Evolution:
    mem = mem + 1 if Environment.Action=exists;
    mem = mem + 1 if Environment.Action=ask and mem<see and (othersayknow=true or (Child1.Action=donotknow and Child2.Action=donotknow and Child3.Action=donotknow and Child4.Action=donotknow));
    mem = mem + 1  and othersayknow=true if Environment.Action=ask and mem<see and othersayknow=false and (Child1.Action=know or Child2.Action=know or Child3.Action=know or Child4.Action=know);
  end Evolution
end Agent

Evaluation
  muddy1 if Child1.see<Environment.total;
  muddy2 if Child2.see<Environment.total;
  muddy3 if Child3.see<Environment.total;
  muddy4 if Child4.see<Environment.total;
  muddy5 if Child5.see<Environment.total;
  saysknows1 if Child1.see<=Child1.mem;
  saysknows2 if Child2.see<=Child2.mem;
  saysknows3 if Child3.see<=Child3.mem;
  saysknows4 if Child4.see<=Child4.mem;
  saysknows5 if Child5.see<=Child5.mem;
end Evaluation

InitStates
Environment.total=2 and
    Child1.see=4 and Child1.othersayknow=true and Child1.mem=-1 and
    Child2.see=4 and Child2.othersayknow=true and Child2.mem=-1 and
    Child3.see=4 and Child3.othersayknow=true and Child3.mem=-1 and
    Child4.see=4 and Child4.othersayknow=true and Child4.mem=-1 and
    Child5.see=4 and Child5.othersayknow=true and Child5.mem=-1 and
    Environment.sayexist=false and Environment.initial=true;
end InitStates

Groups
  g1 = {Child1};
  g2 = {Child2};
  g3 = {Child3};
  g4 = {Child4};
  g5 = {Child5};
end Groups
Fairness
end Fairness
Formulae
    <g1>F muddy2;
    <g1>F muddy3;
    <g1>F muddy4;
    <g1>F muddy5;
    <g2>F muddy1;
    <g2>F muddy3;
    <g2>F muddy4;
    <g2>F muddy5;
    <g3>F muddy1;
    <g3>F muddy2;
    <g3>F muddy4;
    <g3>F muddy5;
    <g4>F muddy1;
    <g4>F muddy2;
    <g4>F muddy3;
    <g4>F muddy5;
    <g5>F muddy1;
    <g5>F muddy2;
    <g5>F muddy3;
    <g5>F muddy4;

end Formulae