-- The protocol for the muddy children
-- This file is automatically generated for 5 children

MODULE b1

GAME

1
  VAR
    see1: 0..4;
    mem1: -1..4;
    othersayknow1: boolean;
    actions1 : { donotknow, know };
  INIT
    see1=4 & othersayknow1=TRUE & mem1=-1;
  TRANS
    case
      mem1<see1: next(actions1) in {donotknow};
      mem1>=see1: next(actions1) in {know};
    esac
  TRANS
     actions0=exists -> next(mem1) = mem1 + 1;
  TRANS
    actions0=ask & mem1<see1 & (othersayknow1 = TRUE | (actions2=donotknow & actions3=donotknow & actions4=donotknow & actions5=donotknow)) -> next(mem1) = mem1 + 1 ;
  TRANS
    actions0=ask & mem1<see1 & othersayknow1=FALSE & (actions2=know | actions3=know | actions4=know | actions5=know) -> next(mem1) = mem1 + 1  & next(othersayknow1) =TRUE;
2
  VAR
    see2: 0..4;
    mem2: -1..4;
    othersayknow2: boolean;
    actions2 : { donotknow, know };
  INIT
    see2=4 & othersayknow2=TRUE & mem2=-1;
  TRANS
    case
      mem2<see2: next(actions2) in {donotknow};
      mem2>=see2: next(actions2) in {know};
    esac
  TRANS
     actions0=exists -> next(mem2) = mem2 + 1;
  TRANS
    actions0=ask & mem2<see2 & (othersayknow2 = TRUE | (actions1=donotknow & actions3=donotknow & actions4=donotknow & actions5=donotknow)) -> next(mem2) = mem2 + 1 ;
  TRANS
    actions0=ask & mem2<see2 & othersayknow2=FALSE & (actions1=know | actions3=know | actions4=know | actions5=know) -> next(mem2) = mem2 + 1  & next(othersayknow2) =TRUE;
3
  VAR
    see3: 0..4;
    mem3: -1..4;
    othersayknow3: boolean;
    actions3 : { donotknow, know };
  INIT
    see3=4 & othersayknow3=TRUE & mem3=-1;
  TRANS
    case
      mem3<see3: next(actions3) in {donotknow};
      mem3>=see3: next(actions3) in {know};
    esac
  TRANS
     actions0=exists -> next(mem3) = mem3 + 1;
  TRANS
    actions0=ask & mem3<see3 & (othersayknow3 = TRUE | (actions1=donotknow & actions2=donotknow & actions4=donotknow & actions5=donotknow)) -> next(mem3) = mem3 + 1 ;
  TRANS
    actions0=ask & mem3<see3 & othersayknow3=FALSE & (actions1=know | actions2=know | actions4=know | actions5=know) -> next(mem3) = mem3 + 1  & next(othersayknow3) =TRUE;
4
  VAR
    see4: 0..4;
    mem4: -1..4;
    othersayknow4: boolean;
    actions4 : { donotknow, know };
  INIT
    see4=4 & othersayknow4=TRUE & mem4=-1;
  TRANS
    case
      mem4<see4: next(actions4) in {donotknow};
      mem4>=see4: next(actions4) in {know};
    esac
  TRANS
     actions0=exists -> next(mem4) = mem4 + 1;
  TRANS
    actions0=ask & mem4<see4 & (othersayknow4 = TRUE | (actions1=donotknow & actions2=donotknow & actions3=donotknow & actions5=donotknow)) -> next(mem4) = mem4 + 1 ;
  TRANS
    actions0=ask & mem4<see4 & othersayknow4=FALSE & (actions1=know | actions2=know | actions3=know | actions5=know) -> next(mem4) = mem4 + 1  & next(othersayknow4) =TRUE;
5
  VAR
    see5: 0..4;
    mem5: -1..4;
    othersayknow5: boolean;
    actions5 : { donotknow, know };
  INIT
    see5=4 & othersayknow5=TRUE & mem5=-1;
  TRANS
    case
      mem5<see5: next(actions5) in {donotknow};
      mem5>=see5: next(actions5) in {know};
    esac
  TRANS
     actions0=exists -> next(mem5) = mem5 + 1;
  TRANS
    actions0=ask & mem5<see5 & (othersayknow5 = TRUE | (actions1=donotknow & actions2=donotknow & actions3=donotknow & actions4=donotknow)) -> next(mem5) = mem5 + 1 ;
  TRANS
    actions0=ask & mem5<see5 & othersayknow5=FALSE & (actions1=know | actions2=know | actions3=know | actions4=know) -> next(mem5) = mem5 + 1  & next(othersayknow5) =TRUE;
6
  VAR
    sayexist: boolean;
    initial: boolean;
    total: 0..5;
    actions0 : { exists, ask };
    muddy1 : boolean;
    saysknows1 : boolean;
    muddy2 : boolean;
    saysknows2 : boolean;
    muddy3 : boolean;
    saysknows3 : boolean;
    muddy4 : boolean;
    saysknows4 : boolean;
    muddy5 : boolean;
    saysknows5 : boolean;
  INIT
    total=2 & sayexist=FALSE & initial=TRUE;
  TRANS
  case
    initial=TRUE & total=0: next(actions0) in {ask};
    initial=TRUE & total>0: next(actions0) in {exists};
    initial=FALSE: next(actions0) in {ask};
  esac

  TRANS
     initial=TRUE & actions0=exists -> next(initial)=FALSE & next(sayexist)=TRUE;
  TRANS
     initial=TRUE & actions0=ask -> next(initial)=FALSE;
  TRANS
    see1<total -> next(muddy1);
  TRANS
    see2<total -> next(muddy2);
  TRANS
    see3<total -> next(muddy3);
  TRANS
    see4<total -> next(muddy4);
  TRANS
    see5<total -> next(muddy5);
  TRANS
    see1<=mem1 -> next(saysknows1);
  TRANS
    see2<=mem2 -> next(saysknows2);
  TRANS
    see3<=mem3 -> next(saysknows3);
  TRANS
    see4<=mem4 -> next(saysknows4);
  TRANS
    see5<=mem5 -> next(saysknows5);


  ATLREACHTARGET (1) muddy2;
  ATLREACHTARGET (1) muddy3;
  ATLREACHTARGET (1) muddy4;
  ATLREACHTARGET (1) muddy5;
  ATLREACHTARGET (2) muddy1;
  ATLREACHTARGET (2) muddy3;
  ATLREACHTARGET (2) muddy4;
  ATLREACHTARGET (2) muddy5;
  ATLREACHTARGET (3) muddy1;
  ATLREACHTARGET (3) muddy2;
  ATLREACHTARGET (3) muddy4;
  ATLREACHTARGET (3) muddy5;
  ATLREACHTARGET (4) muddy1;
  ATLREACHTARGET (4) muddy2;
  ATLREACHTARGET (4) muddy3;
  ATLREACHTARGET (4) muddy5;
  ATLREACHTARGET (5) muddy1;
  ATLREACHTARGET (5) muddy2;
  ATLREACHTARGET (5) muddy3;
  ATLREACHTARGET (5) muddy4;
