/***************************************************************  -*-C-*-  ***/

game_begin    : {
  if (PARSE_MODULES != parse_mode_flag) {
    yyerror("unexpected MODULE definition encountered during parsing");
    YYABORT;
  }
#if HAVE_GAME
  if (opt_game_game(GET_OPTS)) {
    Game_Mode_Exit(__nusmv_parser_env__);
  }
  game_parser_spec_list = Nil;

  for(i=0;i<n_players;i++)
    game_parser_player[i] = Nil;
#endif
}
               game_module_list
                {
#if HAVE_GAME
                  if (!opt_game_game(GET_OPTS)) {
                    /*this is a usual SMV file*/
                    parsed_tree = $2;
                  }
                  else {
                    /* this is a game (realizability problem) .
                       Return a Game with spec list on the left and a
                       module list on the right. This module list
                       contains n_players special modules (with names
                       PLAYER_index) created from player
                       declarations.
                    */
                    node_ptr tmp[n_players];
                    for(i=n_players-1;i>=0;i--) {

                        if(i==n_players-1)
                            tmp[i] = cons(NODEMGR,game_parser_player[i],$2) ;
                        else
                            tmp[i] = cons(NODEMGR,game_parser_player[i],tmp[i+1]) ;
                    }

                    parsed_tree = new_node(NODEMGR,GAME,
                                           game_parser_spec_list,tmp[0]);
                  }
#else /* no GAME */
                  parsed_tree = $2;
#endif
                }
              | {
                  if (PARSE_COMMAND != parse_mode_flag) {
                    yyerror("unexpected command encountered during parsing");
                    YYABORT;
                  }
                }
               command {parsed_tree = $2;}
              | {
                  if (PARSE_LTL_EXPR != parse_mode_flag){
                    yyerror("unexpected expression encountered during parsing");
                    YYABORT;
                  }
                }
               ltl_expression  {parsed_tree = $2;}
              ;

/* ------------------------------------------------------------------------ */
/* ----------------------------  TYPES ------------------------------------ */
/* ------------------------------------------------------------------------ */

simple_list_expression
              : simple_expression {$$ = cons(NODEMGR,$1,Nil);}
              | simple_list_expression TOK_COMMA simple_expression {$$ = cons(NODEMGR,$3, $1);}
              ;

simple_players_list
//        : TOK_NUMBER {$$=node_get_int($1);}
//        | simple_players_list TOK_COMMA TOK_NUMBER {$$ = cons(NODEMGR,($3), ($1));}

        : TOK_NUMBER {$$ = cons(NODEMGR,$1,Nil);}
        | simple_players_list TOK_COMMA TOK_NUMBER {$$ = cons(NODEMGR,$3, $1);}
        ;


/* ------------------------------------------------------------------------ */
/* ---------------------------- DECLARATIONS  ----------------------------- */
/* ------------------------------------------------------------------------ */

/*
 An NuGaT program is a repetition of modules. Also there can be one
 game definition. Each module has a signature and a body. Game
 definition constructs are passed through variables
 game_parser_spec_list, game_parser_player[all]
 and not returned by this rule.
*/
game_module_list
             : module {$$ = cons(NODEMGR,$1, Nil);}
             | game_definition {$$ = Nil;}
             | module_list module {$$ = cons(NODEMGR,$2, $1);}
             | module_list game_definition {$$ = $1;}
             ;

/* A game definition consists of GAME keyword, definitions of its two
   players and a list of usual and game specifications.
   NOTE: this rule returns value not by usual way
   but through variables game_parser_spec_list,
   game_parser_player[all].
*/
game_definition
             : TOK_GAME game_body
                     {
#if HAVE_GAME
                       /* check that the game is not redeclared */
                       if (opt_game_game(GET_OPTS)) {
                         nusmv_yyerror_lined("redefinition of a GAME", $1);
                       }
                       else {
                         Game_Mode_Enter(__nusmv_parser_env__);
                       }
#else
                       nusmv_yyerror_lined("GAME declaration cannot be processes "
                                     "because GAME package is not set up\n"
                                     "Check --enable-addons=game option of "
                                     "the configure script\n", $1);
                       YYABORT;
#endif
                       game_parser_spec_list = $2;
                       $$ = Nil;
                     }
             ;

game_body
             :       {$$=Nil;}
             | game_body_element game_body
                     {if (Nil != $1) $$ = cons(NODEMGR,$1,$2); else $$ = $2;}
             ;

/* a GAME definition consists of both players definitions,
   usual specifications and game specifications.
*/
game_body_element
             : players
// not implemented    | invarspec
// not implemented    | ctlspec
// not implemented    | ltlspec
// not implemented    | pslspec
// not implemented    | compute
             | reachtarget
             | atlreachtarget
             | avoidtarget
             | reachdeadlock
             | avoiddeadlock
             | buchigame
             | ltlgame
             | genreactivity
             ;

/* a player's body is the same as module's body except the player
   cannot have ISA declaration and specifications
*/
player_body  : { $$ = Nil; }
             | player_body player_body_element{ $$ = cons(NODEMGR,$2, $1); }
             ;

player_body_element
             : var
             | frozen_var
// not implemented : | input_var
             | assign
             | init
             | invar
             | trans
             | define_decls
// not implemented :    | fairness
// not implemented :    | justice
// not implemented :    | compassion
             ;

players :   {$$=Nil;}
            |  TOK_NUMBER player_body players
            {
                /* a player definition is converted to a module
                   definitino with a special name. This is done
                   to simplify the further flattening
                */


//                printf("\n %d %d %d, ",$1->type,$1->lineno,node_get_int($1)); // DEBUG

                int index=node_get_int($1)-1;
                char str[50];

//                printf("\n%d",n_players); // DEBUG

                if(n_players==-1) {
                    n_players = node_get_int($1);
//                    printf("\n %d",n_players); // DEBUG
                    game_parser_player = (node_ptr*)malloc(sizeof(node_ptr)*n_players);

                    for(i=0;i<n_players;i++) game_parser_player[i] = Nil;

                }

                if (game_parser_player[index] != Nil) {
                    sprintf(str,"redefinition of a PLAYER %d",node_get_int($1));
                    nusmv_yyerror_lined(str, index);
                    YYABORT;
                }

                sprintf(str,"%d",index+1);
//                printf("\n%s",str); // DEBUG

                game_parser_player[index] = new_lined_node(NODEMGR,MODULE,
                                                           new_node(NODEMGR,MODTYPE,
                                                                    new_node(NODEMGR,ATOM,(node_ptr)UStringMgr_find_string(USTRING_MGR(NuSMVEnv_get_value(__nusmv_parser_env__, ENV_STRING_MGR)),str),
                                                                             Nil), Nil),  $2, node_get_int($1));
                $$=Nil;
            }
            ;
player_num    : TOK_NUMBER {$$=node_get_int($1);}
              ;
reachtarget   : TOK_REACHTARGET player_num simple_expression optsemi
                       {
#if HAVE_GAME
                         $$ = new_lined_node(NODEMGR,REACHTARGET, NODE_FROM_INT($2), $3, $1);
#endif
                       }
              ;
atlreachtarget   : TOK_ATLREACHTARGET
                    TOK_LP simple_players_list TOK_RP simple_expression optsemi
                        {
#if HAVE_GAME
                        $$ = new_lined_node(NODEMGR,ATLREACHTARGET, NODE_FROM_INT($3), $5, $1);
#endif
                        }
              ;
avoidtarget   : TOK_AVOIDTARGET player_num simple_expression optsemi
                       {
#if HAVE_GAME
                         $$ = new_lined_node(NODEMGR,AVOIDTARGET, NODE_FROM_INT($2), $3, $1);
#endif
                       }
              ;
reachdeadlock : TOK_REACHDEADLOCK player_num optsemi
                       {
#if HAVE_GAME
                         $$ = new_lined_node(NODEMGR,REACHDEADLOCK, NODE_FROM_INT($2), Nil, $1);
#endif
                       }
              ;
avoiddeadlock : TOK_AVOIDDEADLOCK player_num optsemi
                       {
#if HAVE_GAME
                         $$ = new_lined_node(NODEMGR,AVOIDDEADLOCK, NODE_FROM_INT($2), Nil, $1);
#endif
}
              ;
buchigame     : TOK_BUCHIGAME player_num
                TOK_LP simple_list_expression TOK_RP optsemi
                       {
#if HAVE_GAME
                         $$ = new_lined_node(NODEMGR,BUCHIGAME, NODE_FROM_INT($2),
                                             new_lined_node(NODEMGR,GAME_EXP_LIST,
                                                            reverse($4), Nil, $3),
                                             $1);
#endif
}
              ;
ltlgame       : TOK_LTLGAME player_num ltl_expression optsemi
                       {
#if HAVE_GAME
                         $$ = new_lined_node(NODEMGR,LTLGAME, NODE_FROM_INT($2), $3, $1);
#endif
                       }
              ;
genreactivity : TOK_GENREACTIVITY player_num
                TOK_LP simple_list_expression TOK_RP TOK_IMPLIES
                TOK_LP simple_list_expression TOK_RP optsemi
                       {
#if HAVE_GAME
                         $$ = new_lined_node(NODEMGR,GENREACTIVITY, NODE_FROM_INT($2),
                                             new_lined_node(NODEMGR,GAME_TWO_EXP_LISTS,
                                                            reverse($4), reverse($8), $6),
                                             $1);
#endif
                       }
              ;
